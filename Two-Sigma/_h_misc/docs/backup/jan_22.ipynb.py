{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"import gc\nimport os\nimport re\nfrom datetime import datetime, timedelta\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\ntqdm.pandas()\n\npd.set_option('max_columns', 50)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ca7f83bbdaaded16b19ad6b45bea3064553135cd"},"cell_type":"markdown","source":"Usually, you do not need to worry about memory management. When objects are no longer needed, Python automatically reclaims memory from them. However, understanding how GC works can help you write better Python programs."},{"metadata":{"_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","trusted":true},"cell_type":"code","source":"from kaggle.competitions import twosigmanews\nenv = twosigmanews.make_env()\nprint('Done!')\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"249b4b7740a3ae182adec9b465ab8316e9a634d6"},"cell_type":"code","source":"(market_train, news_train) = env.get_training_data()\nprint('market_df shape: {} \\nnews_df shape {}'.format(market_train_df.shape, news_train_df.shape))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c723468e4fd368da834055ba6c2727a6b351c537"},"cell_type":"code","source":"start = datetime(2009, 1, 1, 0, 0, 0).date()\nmarket_train = market_train.loc[market_train['time'].dt.date >= start].reset_index(drop=True)\nnews_train = news_train.loc[news_train['time'].dt.date >= start].reset_index(drop=True)\nprint('market_df shape: {} \\nnews_df shape {}'.format(market_train.shape, news_train.shape))\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f36281f422f1f0780335b04a1af8114d76be0e11"},"cell_type":"code","source":"news_train.head(2)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"054370de5c45d1da1ad1bacff1ea5683cb494e08"},"cell_type":"code","source":"market_train.head(2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0d1305aaad66da56efc622383bf9f417c223737d"},"cell_type":"markdown","source":"__Trading universe__ on a given date is the set of instruments that are avilable for trading (the scoring function will not consider instruments that are not in the trading universe). The trading universe changes daily.\n\n"},{"metadata":{"trusted":true,"_uuid":"d488f5c9b221a86b419cb3c94b1ae7a625905fb0"},"cell_type":"code","source":"feat = 'universe'\nsummary = market_train[feat].value_counts(dropna=False)\nprint(summary.head())\nprint(len(summary))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4890c9570716792cc054d1de24683220a0102e4f"},"cell_type":"code","source":"# LOOKS LIKE AROUND 4M DIFFERENT ASSETS\n# THIS IS JUST AN INDICATOR FEATURE FOR INCLUSION IN UNIVERSE\nmarket_train[feat].head(3)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5e1152201dce107c25ff3b9a63f0482bb4fc1966"},"cell_type":"markdown","source":"Residual Return:  \nReturn independent of the benchmark. The residual return is the return relative to beta times the benchmark return. To be exact, an asset's residual return equals its excess return minus beta times the benchmark excess return."},{"metadata":{"_uuid":"8f1f45ec4401f249ca9f41391b02c0c7ee949839"},"cell_type":"markdown","source":"### Preprocess News"},{"metadata":{"trusted":true,"_uuid":"a70d631ddb51b45ac1113a39b6644d004ff335e1"},"cell_type":"code","source":"drop_list = [\n        'audiences', 'subjects', 'assetName',\n        'headline', 'firstCreated', 'sourceTimestamp',\n    ]\n\nnews_train.drop(drop_list, axis=1, inplace=True)\n\nfor col in ['headlineTag', 'provider', 'sourceId']:\n        news_train[col], uniques = pd.factorize(news_train[col])\n        del uniques","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b3098b33714b97e36ec74c70eca034f37c228f6b"},"cell_type":"code","source":"news_train['assetCodes'] = news_train['assetCodes'].apply(lambda x: re.sub(r'[{}\\']', '', x))\n# SOME WEIRD ERROR WHEN RUNNING A LAMBDA WITH X.SPLIT(','); WORKS FINE\n# ON MY LOCAL. THIS IS A WORKAROUND.\nfeat = []\nfor i in news_train['assetCodes']:\n    new = i.split(',')\n    feat.append(new)    \nnews_train['assetCodes'] = feat\ndel feat","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b98b0ea34763b4e60e7f95940e91a8425d703133"},"cell_type":"code","source":"# EMBARRISING HOW MUCH FASTER THIS METHOD IS - LESSON LEARNED?\nasts = []\nidxs = []\nfor idx, ast in news_train['assetCodes'].iteritems():\n    asts.extend(ast)\n    repeat_index = [int(idx)]*len(ast)\n    idxs.extend(repeat_index)\ndf_idx = pd.DataFrame({'index_col': idxs, 'assetCode': asts})\ndel asts, idxs\ngc.collect()\ndf_idx.head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"dd4ad0bd0db6912982b3e0d1337f2ebeb2b9fc00"},"cell_type":"code","source":"df_idx.set_index('index_col', inplace=True)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5568db5dfc8429e2003f6af5ea9e1b8c2ea4d831"},"cell_type":"code","source":"news_train.head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9eb3bb186c1aa42ef0dd51d4ef4845d6ec191341"},"cell_type":"code","source":"df_news = pd.concat([df_idx, news_train], axis=1,\n                 join='outer',join_axes=[df_idx.index]).reset_index(drop=True) \ndel df_idx, news_train\ngc.collect()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9eb3bb186c1aa42ef0dd51d4ef4845d6ec191341"},"cell_type":"code","source":"                                                           \ndf_news.drop(['assetCodes'], axis=1, inplace=True)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"de664a7a688e947f52728d42604b0e1b17af25cb"},"cell_type":"code","source":"df_news.head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0ddc0b65c47b436d27dc1635bbe343d6e30a2f29"},"cell_type":"code","source":"df_news['date'] = pd.to_datetime(df_news.time).dt.date  # Add date column\n ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"23a276d6f479a361d73fe84d84610ee8858e6788"},"cell_type":"code","source":"aggregations = ['mean']\ngp = df_news.groupby(['assetCode', 'date']).agg(aggregations)\ngp.columns = pd.Index([\"{}_{}\".format(e[0], e[1]) for e in gp.columns.tolist()])\ngp.reset_index(inplace=True)\n# Set datatype to float32\nfloat_cols = {c: 'float32' for c in gp.columns if c not in ['assetCode', 'date']}\n# return gp.astype(float_cols)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4b168ba2eefad5d4ba5a3e1a06f897004c3fb62c"},"cell_type":"code","source":"df_agg = gp.astype(float_cols)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"76427978f4be41f3f526214dce1567cefc29da31"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fa24896e3a7481cacaa713324417eab572b1f31c"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"80f1bb48faeb532bae906e920360ec585a2825dc"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3b317974d1ab35d6a061cb93c2d005856fb7402b"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":1}